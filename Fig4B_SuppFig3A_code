# Manuscript: "Investigating chromosomal instability in long-term survivors with glioblastoma and grade 4 astrocytoma"
# Script author: Subramanian Venkatesan
# The latest TCGA-GBM dataset download and analysis for the paper was on 03-06-2023

setwd('...') #specify working directory 

####################################################################
####Download TCGA-GBM "Copy Number Segment"  data using the TCGABiolinks package
####################################################################
library(TCGAbiolinks)

#Specify the query to download the "TCGA-GBM" dataset. 
tcga_GBM.cnv.query <- GDCquery( #prepare the query to extract copy number data
  project = "TCGA-GBM", 
  data.category = "Copy Number Variation", 
  access = "open", 
  legacy = FALSE, 
  data.type = "Masked Copy Number Segment",
  sample.type = c("Primary Tumor")
)
table(as.factor(tcga_GBM.cnv.query[[1]][[1]]$sample_type)) #Sanity check: checking how many primary samples there are

#Download and save the dataset
GDCdownload(tcga_GBM.cnv.query, directory = "./TCGA_biolinks_datasets") 
tcga_GBM.cnv <- GDCprepare(tcga_GBM.cnv.query, #prepare the data
                           save =TRUE,
                           directory = "./TCGA_biolinks_datasets")

'#If needed, you can save the R object to a file. In that case uncomment the code below
#What: TCGA-GBM "Copy Number Segment", data.type = "Masked Copy Number Segment".  
##Included in dataset: "Primary Tumor" samples only. =
#Not included in dataset: "Recurrent Tumor" and normal samples
#----------load "tcga_GBM.cnv" here--------
saveRDS(object = tcga_GBM.cnv, file = "./TCGA_biolinks_datasets/TCGA-GBM/tcga_GBM.cnv.RDS",compress = FALSE) 
tcga_GBM.cnv = readRDS(file = "./TCGA_biolinks_datasets/TCGA-GBM/tcga_GBM.cnv.RDS")
'

###################################################################################
####Download TCGA-GBM clinical data using TCGABiolinks method: Clinical indexed data
###################################################################################
tcga_GBM.clin.indexed <- GDCquery_clinic(project = "TCGA-GBM", type = "clinical") #prepare the query to extract clinical data
colnames(tcga_GBM.clin.indexed)[2] <- "sample" #rename ID column

'#If needed you can save the R object to a file. In that case uncomment the code below
#What: TCGA-GBM Clinical indexed data
##Included in dataset: all samples
#Not included in dataset: NA
#----------load "tcga_GBM.clin.indexed" here--------
saveRDS(object = tcga_GBM.clin.indexed, file = "./TCGA_biolinks_datasets/TCGA-GBM/tcga_GBM.clin.indexed.RDS",compress = FALSE) 
tcga_GBM.clin.indexed = readRDS(file = "./TCGA_biolinks_datasets/TCGA-GBM/tcga_GBM.clin.indexed.RDS")
'

###################################################################################
####Download the TCGA-GBM mutation data using the TCGABiolinks package
###################################################################################
tcga_GBM.maf <- GDCquery( #prepare the query to extract mutation data
  project = "TCGA-GBM", 
  data.category = "Simple Nucleotide Variation", 
  access = "open", 
  legacy = FALSE, 
  data.type = "Masked Somatic Mutation", 
  workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking"
)

#remove unwanted samples 
query_results.maf = tcga_GBM.maf[[1]][[1]]
includesamples <- substr(tcga_GBM.cnv$Sample,1,12) #list samples that contain copy number data
query_results.maf2 <- query_results.maf[substr(query_results.maf$cases,1,12) %in% includesamples,] # include samples that contain mutation as well as CNV data
tcga_GBM.maf[[1]][[1]]=query_results.maf2

#Download and save the dataset
GDCdownload(tcga_GBM.maf, directory = "./TCGA_biolinks_datasets")
tcga_GBM.maf <- GDCprepare(tcga_GBM.maf, 
                           save =TRUE,
                           directory = "./TCGA_biolinks_datasets")

'#If needed you can save the R object to a file. In that case uncomment the code below
#What: TCGA-GBM mutation data
##Included in dataset: samples that contain mutation as well as CNV data
#Not included in dataset: samples without CNV data
#----------load "tcga_GBM.maf" here--------
saveRDS(object = tcga_GBM.maf, file = "./TCGA_biolinks_datasets/tcga_GBM.maf.RDS",compress = FALSE) 
tcga_GBM.maf = readRDS(file = "./TCGA_biolinks_datasets/tcga_GBM.maf.RDS")
'

###################################################################################
####Allocate the TCGA-GBM cohort into:
#GBM typical survivors (GBM-TS): (<= 1095 days, which is lower than or equal to 3 years) and IDH-WT
#GBM long-term survivors (GBM-LTS): (>1095 days, which is longer than 3 years) and IDH-WT
#IDH grade 4 astrocytomas: IDH-MUT
###################################################################################
library(dplyr)

empty_columns <- sapply(tcga_GBM.clin.indexed, function(x) all(is.na(x) | x == ""))
tcga_GBM.clin.indexed2 <- tcga_GBM.clin.indexed[, !empty_columns] #remove all empty columns in tcga_GBM.clin.indexed

#label samples according to group status: whether patient lived shorter than 3 years ("Shorter_1095") or longer than 3 years ("Longer_1095")
#Be aware this is not the final survivor status, it is an intermediate step
tcga_GBM.clin.indexed3 <- tcga_GBM.clin.indexed2 %>%
  mutate(survivor_status = case_when(
    days_to_death > 1095 ~ "Longer_1095",
    days_to_last_follow_up >= 1095 ~ "Longer_1095",
    days_to_death <= 1095 ~ "Shorter_1095",
  ))

#Add IDH status 
tcga_GBM.clin.indexed3 <- tcga_GBM.clin.indexed3 %>%
  mutate(IDH_status = case_when(
    tcga_GBM.clin.indexed3$sample %in% substr(tcga_GBM.maf$Tumor_Sample_Barcode[tcga_GBM.maf$Hugo_Symbol == "IDH1" & tcga_GBM.maf$Variant_Classification != "Silent"],1,12)    ~ "IDH-MUT",
    tcga_GBM.clin.indexed3$sample %in% substr(tcga_GBM.maf$Tumor_Sample_Barcode[tcga_GBM.maf$Hugo_Symbol == "IDH2" & tcga_GBM.maf$Variant_Classification != "Silent"],1,12)    ~ "IDH-MUT",
    TRUE ~ "IDH-WT"))

#remove patients whose vital_status is not reported
#for example for some patients: The "vital_status"="Dead" but the "Days_to_last_follow_up" is blank, so you need to add "is.na(tcga_GBM.clin.indexed3$survivor_status)" as below
sample.remove1 <- tcga_GBM.clin.indexed3$sample[tcga_GBM.clin.indexed3$vital_status == "Not Reported" | is.na(tcga_GBM.clin.indexed3$vital_status) | is.na(tcga_GBM.clin.indexed3$survivor_status)] 

#remove patients that were still alive at a last follow up <= 1095 days 
sample.remove2 <- tcga_GBM.clin.indexed3$sample[tcga_GBM.clin.indexed3$vital_status == "Alive" & tcga_GBM.clin.indexed3$days_to_last_follow_up <= 1095]

`%!in%` <- Negate(`%in%`) #create a "not in" function
#create a dataframe with GBM patients who could be allocated into Long or Short term survivorship (Be aware this is an intermediate step: this is not the final survivor status yet)
tcga_GBM.clin.indexed4 <- tcga_GBM.clin.indexed3[tcga_GBM.clin.indexed3$sample %!in% sample.remove1 & tcga_GBM.clin.indexed3$sample %!in% sample.remove2,]
tcga_GBM.clin.indexed4 <- tcga_GBM.clin.indexed4[,c(1,2,42:43,3:41)] #reorder columns so that "survivor_status" and "IDH_status" are in the front of the dataframe

#Add the 3 final categories: "GBM-TS" (= typical survivor), "GBM-LTS" (=long term survivor),"IDH-MUT grade 4 astrocytoma"
tcga_GBM.clin.indexed4$final_status <- "bla"
tcga_GBM.clin.indexed4$final_status[tcga_GBM.clin.indexed4$survivor_status == "Shorter_1095" & tcga_GBM.clin.indexed4$IDH_status == "IDH-WT"] <- "GBM-TS"
tcga_GBM.clin.indexed4$final_status[tcga_GBM.clin.indexed4$survivor_status == "Longer_1095" & tcga_GBM.clin.indexed4$IDH_status == "IDH-WT"] <- "GBM-LTS"
tcga_GBM.clin.indexed4$final_status[tcga_GBM.clin.indexed4$IDH_status == "IDH-MUT"] <- "IDH-MUT grade 4 astrocytoma"

tcga_GBM.clin.indexed4 <- tcga_GBM.clin.indexed4[,c(1:4,44,5:43)] #reorder columns so that "survivor_status" and "IDH_status" are in the front of the dataframe
table(tcga_GBM.clin.indexed4$final_status)# sanity check: checking whether you have the 3 categories: "GBM-LTS","GBM-TS", "IDH-MUT grade 4 astrocytoma"

###################################################################################
#### Copy number data QC: filter out samples based on previously determined list
###################################################################################
#downloaded the processed and QC'ed SNP6 data from the "Van Loo lab". This list contains samples that passed QC.
#<https://github.com/VanLoo-lab/ascat/blob/master/ReleasedData/TCGA_SNP6_hg19/summary.ascatv3TCGA.penalty70.hg19.tsv> 

SNP6 <- read.table("summary.ascatv3TCGA.penalty70.hg19.tsv", sep="\t", header=TRUE, row.names = 1)
table(SNP6$cancer_type)
SNP6_GBM <- SNP6[(SNP6$cancer_type == "GBM"),]
passedQC <- SNP6_GBM$barcodeTumour[(SNP6_GBM$QC == "Pass")]

#filter out samples based on list in summary.ascatv3TCGA.penalty70.hg19.tsv
length(levels(as.factor(tcga_GBM.cnv$Sample))) # sanity check
tcga_GBM.cnv_filtered1 <- tcga_GBM.cnv[tcga_GBM.cnv$Sample %in% passedQC,] #only keep samples that have passed QC
length(levels(as.factor(tcga_GBM.cnv_filtered1$Sample))) # Note: this is still before considering the final survivor status (i.e. "final_status"), which will filter out more samples

sample.keep <- tcga_GBM.clin.indexed4$sample #this vector contains the TCGA-barcodes that have a "final_status"
tcga_GBM.cnv_filtered2 <- tcga_GBM.cnv_filtered1[substr(tcga_GBM.cnv_filtered1$Sample,1,12) %in% sample.keep,] #remove all samples that have not passed QC

tcga_GBM.cnv_filtered2$Sample <- as.factor(tcga_GBM.cnv_filtered2$Sample)
length(levels(tcga_GBM.cnv_filtered2$Sample)) # sanity check

###################################################################################
####Prepare the downloaded copy number segment  data for input into "CINSignatureQuantification" package
###################################################################################
#The TCGA CNV pipeline transforms a CNV value into a segment mean, where Segment mean = log2(CNV/2). A copy number can be derived from the segment means by calculating 2 * (2segment mean).
tcga_GBM.cnv_filtered2$SegVal <- (2^tcga_GBM.cnv_filtered2$Segment_Mean)*2
tcga_GBM.cnv_filtered3 <- cbind(tcga_GBM.cnv_filtered2[,c(2:4,8,7)])
tcga_GBM.cnv_filtered3$Sample <- substr(tcga_GBM.cnv_filtered3$Sample,1,12) 
colnames(tcga_GBM.cnv_filtered3) <- c("chromosome","start","end","segVal","sample")# use tcga_GBM.cnv_filtered3 for further analyses with CINSignatureQuantification

'#If needed you can save the R object to a file. In that case uncomment the code below
#What: TCGA-GBM "Copy Number Segment", data.type = "Masked Copy Number Segment". SegVal is absolute copy number
##Included in dataset: "Primary Tumor" samples only. SegVal.
#Not included in dataset: "Recurrent Tumor" and normal samples, "Segment_Mean", filtered out samples without "final_status" and samples that did not pass QC
#----------load "tcga_GBM.cnv_filtered2" here--------
saveRDS(object = tcga_GBM.cnv_filtered3, file = "./TCGA_biolinks_datasets/TCGA-GBM/tcga_GBM.cnv_filtered3.RDS",compress = FALSE) 
tcga_GBM.cnv_filtered3 = readRDS(file = "./TCGA_biolinks_datasets/TCGA-GBM/tcga_GBM.cnv_filtered3.RDS")
'


###################################################################################
####CIN Signature Quantification
###################################################################################
#<https://github.com/markowetzlab/CINSignatureQuantification> This R package allows you to quantify the activity of the 17 signatures presented. It also allows you to quantify signature activities from other publications.
library(CINSignatureQuantification)

#sanity check: levels(as.factor(tcga_GBM.cnv_filtered3$sample)) 
mySigs = quantifyCNSignatures(tcga_GBM.cnv_filtered3) #Note: 1 sample has been excluded by "CINSignatureQuantification"
mySigs.scaled <- as.data.frame(mySigs@activities[["scaledAct3"]])

GBM_TS <- tcga_GBM.clin.indexed4$sample[tcga_GBM.clin.indexed4$final_status == "GBM-TS"] #create a vector containing the TCGA IDs of all GBM-TS patients
GBM_LTS <- tcga_GBM.clin.indexed4$sample[tcga_GBM.clin.indexed4$final_status == "GBM-LTS"] #create a vector containing the TCGA IDs of all GBM-LTS patients
IDH_grade4_astrocytoma <- tcga_GBM.clin.indexed4$sample[tcga_GBM.clin.indexed4$final_status == "IDH-MUT grade 4 astrocytoma"] #create a vector containing the TCGA IDs of all IDH-MUT grade 4 astrocytoma patients

#sanity check: levels(as.factor(row.names(mySigs.scaled2))) 
#sanity check: table(as.factor(mySigs.scaled$final_status)) 

# mySigs.scaled
mySigs.scaled2 <- mySigs.scaled %>%           
  mutate(final_status = case_when(
    rownames(mySigs.scaled) %in% GBM_TS ~ "GBM_TS",
    rownames(mySigs.scaled) %in% GBM_LTS ~ "GBM_LTS",
    rownames(mySigs.scaled) %in% IDH_grade4_astrocytoma ~ "IDH-MUT grade 4 astrocytoma",
  ))

mySigs.scaled2 <- mySigs.scaled2[,c(18,1:17)] #reorder columns so that survivor_status comes first

#rescale every column in mySigs.scaled2 with min 0 and max 1
library(scales)
mySigs.scaled.RESCALED <- cbind(final_status=mySigs.scaled2[,1],as.data.frame(apply(mySigs.scaled2[2:18],2, rescale))) #rescale every column with min 0 and max 1

'
#If needed you can save the R object to a file. In that case uncomment the code below
#What: Rescaled data of initially scaled CinSignatureQuantification output of all 17 CIN signatures
##Included in dataset: "Primary Tumor" samples only
#Not included in dataset: "Recurrent Tumor" and normal samples, filtered out samples without "final_status" and samples that did not pass QC
#----------load "mySigs.scaled2" here--------
saveRDS(object = mySigs.scaled.RESCALED, file = "./TCGA_biolinks_datasets/mySigs.scaled.RESCALED.RDS",compress = FALSE) 
mySigs.scaled.RESCALED = readRDS(file = "./TCGA_biolinks_datasets/mySigs.scaled.RESCALED.RDS") #load mySigs.scaled.RESCALED, which contains samples of which CNV signatures have been calculated and of which control/long-term suvivor status is known 
'

#make mySigs.scaled.RESCALED longformat
library(tidyr)

mySigs.scaled.RESCALED.long <- mySigs.scaled.RESCALED %>%
  pivot_longer(
    cols = starts_with("CX"),
    names_to = "Signature",
    names_prefix = "CX",
    values_to = "Activity",
    values_drop_na = FALSE
  )

#reorder levels
mySigs.scaled.RESCALED.long$final_status <- ordered(mySigs.scaled.RESCALED.long$final_status,levels = c("GBM_TS", "GBM_LTS", "IDH-MUT grade 4 astrocytoma"))
levels(mySigs.scaled.RESCALED.long$final_status)#sanity check --> "GBM-TS","GBM-LTS", "IDH-MUT grade 4 astrocytoma"

###################################################################################
####Assumption testing for the Kruskal-Wallis test: explained in https://www.datanovia.com/en/lessons/anova-in-r/
###################################################################################
library(rstatix)
library(ggpubr)

#Check assumption 1: Identify outliers in each cell design. 
mySigs.scaled.RESCALED.long %>%
  group_by(Signature) %>%
  identify_outliers(Activity)

#Check assumption 2: Recommended test: Levene’s test to check the homogeneity of variances. 
#If the p-value is not less than the significance level of 0.05. 
#This means that there is no evidence to suggest that the variance across groups is statistically significantly different. 
library(car)
mySigs.scaled.RESCALED.long %>%
  group_by(Signature) %>%
  leveneTest(Activity ~ final_status, data = .)

#Check assumption 3: normality assumption by Shapiro-Wilk test
mySigs.scaled.RESCALED.long %>%
  group_by(Signature) %>%
  shapiro_test(Activity) 

#Note that, if your sample size is greater than 50, the normal QQ plot is preferred because at larger sample sizes the Shapiro-Wilk test becomes very sensitive even to a minor deviation from normality.
ggqqplot(mySigs.scaled.RESCALED.long, "Activity", facet.by = "Signature")

###################################################################################
#### Statistics and plotting only the significantly different CIN signatures according to the survivor status (CIN sig 1,5,10 and 11)
###################################################################################
library(ggplot2)

#Choose the Kruskal-Wallis test, which is the non-parametric alternative to one-way ANOVA test, since normality of the data may not be assumed
pwc <- mySigs.scaled.RESCALED.long %>% 
  group_by(Signature) %>%
  dunn_test(Activity ~ final_status, p.adjust.method = "bonferroni") %>%
  add_significance("p.adj") %>% 
  p_round(digits = 4) %>% 
  p_format(., leading.zero = TRUE)

pwc$Signature <- as.numeric(pwc$Signature)
class(pwc$Signature) #sanity check

pwc <- pwc[order(pwc$Signature),]
pwc$Signature <- as.factor(pwc$Signature)
class(pwc$Signature) #sanity check

pwc2 <- pwc %>% 
  add_xy_position(x = "Signature") #add the position of the significance bars

pwc3 <- pwc2 %>% # this step is needed for proper positioning of the p-values in the boxplot
  mutate(xmin = sort(xmin)) %>%
  mutate(xmax = sort(xmax))

#Subset the significant signatures (i.e. CINsignature 1, 5, 10 and 11) and non-significant signature
pwc.subset.sign <- subset(pwc3, Signature == 1 | Signature == 5 | Signature == 10 | Signature == 11) # Use the statistics from this table!!!
pwc.plot <- cbind(pwc.subset.sign[,1:10],pwc3[1:12,11:15])

#workaround to ensure proper plotting with correct positions of p-values 
mySigs.scaled.RESCALED.long.subset.sign <- subset(mySigs.scaled.RESCALED.long, Signature == 1 | Signature == 5 | Signature == 10 | Signature == 11)

library(RColorBrewer)
brewer.pal(n = 9, name = "Set1")

#Plot the significant signatures: i.e. CINsignature 1, 5, 10 and 11
p <- ggboxplot(mySigs.scaled.RESCALED.long.subset.sign, x="Signature", y="Activity", 
               color = "final_status",
               add = "jitter",
               palette =c("#999999","#4DAF4A", "#377EB8"),
               ylim = c(0, 1.5),
               size = 0.3,
               add.params = list(size = 0.5, jitter = 0.3),
               xlab = "CIN signature",
               ylab = "Rescaled activity") +
  scale_y_continuous(breaks = seq(0, 1.0, 0.2)) +
  stat_pvalue_manual(pwc.plot, label = "P = {p.adj}", size = 10, tip.length = 0, hide.ns = TRUE) +
  font("xlab", size = 40, face = "bold") +
  font("ylab", size = 40, face = "bold") +
  font("xy.text", size = 35) +
  font("legend.title", size = 0) +
  font("legend.text", size = 35) +
  theme(axis.ticks = element_line(linewidth = 0.5),
        axis.line = element_line(linewidth = 0.5)) 

#Save the plot of significant signatures 
ggsave("CINsigs_RESCALED_survivorstatus_sign_Signatures.pdf", 
       width = 10, 
       height = 8,
       path = "...") #specify where to save

###################################################################################
#### Statistics and plotting the NON-SIGNIFICANT CIN signatures according to the survivor status
###################################################################################

#Choose the Kruskal-Wallis test, which is the non-parametric alternative to one-way ANOVA test, since normality of the data may not be assumed
pwc <- mySigs.scaled.RESCALED.long %>% 
  group_by(Signature) %>%
  dunn_test(Activity ~ final_status, p.adjust.method = "bonferroni") %>%
  add_significance("p.adj") %>% 
  p_round(digits = 4) %>% 
  p_format(., leading.zero = TRUE)

pwc$Signature <- as.numeric(pwc$Signature)
class(pwc$Signature) #sanity check

pwc <- pwc[order(pwc$Signature),]
pwc$Signature <- as.factor(pwc$Signature)
class(pwc$Signature) #sanity check

pwc2 <- pwc %>% 
  add_xy_position(x = "Signature") #add the position of the significance bars

pwc3 <- pwc2 %>% # this step is needed for proper positioning of the p-values in the boxplot
  mutate(xmin = sort(xmin)) %>%
  mutate(xmax = sort(xmax))

#Subset the NON-SIGNIFICANT CIN signatures
pwc.subset.nonsign <- subset(pwc3, Signature != 1 & Signature != 5 & Signature != 10 & Signature != 11) # Use the statistics from this table!!!
pwc.plot <- cbind(pwc.subset.nonsign[,1:10],pwc3[1:39,11:15])

#workaround to ensure proper plotting with correct positions of p-values 
mySigs.scaled.RESCALED.long.subset.nonsign <- subset(mySigs.scaled.RESCALED.long, Signature != 1 & Signature != 5 & Signature != 10 & Signature != 11)

library(RColorBrewer)
brewer.pal(n = 9, name = "Set1")

#Plot the NON-SIGNIFICANT signatures
p <- ggboxplot(mySigs.scaled.RESCALED.long.subset.nonsign, x="Signature", y="Activity", 
               color = "final_status",
               add = "jitter",
               palette =c("#999999","#4DAF4A", "#377EB8"),
               ylim = c(0, 1.5),
               size = 0.3,
               add.params = list(size = 0.5, jitter = 0.3),
               xlab = "CIN signature",
               ylab = "Rescaled activity") +
  scale_y_continuous(breaks = seq(0, 1.0, 0.2)) +
  stat_pvalue_manual(pwc.plot, label = "P = {p.adj}", size = 10, tip.length = 0, hide.ns = TRUE) +
  font("xlab", size = 40, face = "bold") +
  font("ylab", size = 40, face = "bold") +
  font("xy.text", size = 35) +
  font("legend.title", size = 0) +
  font("legend.text", size = 35) +
  theme(axis.ticks = element_line(linewidth = 0.5),
        axis.line = element_line(linewidth = 0.5)) 

#Save the plot of significant signatures 
ggsave("CINsigs_RESCALED_survivorstatus_NONsign_Signatures.pdf", 
       width = 15, 
       height = 8,
       path = "...") #specify where to save
